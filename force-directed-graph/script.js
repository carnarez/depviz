const e=document.createElement("script");e.src="https://unpkg.com/three",e.onload=()=>{console.log("Loaded three.js");const e=document.createElement("script");e.src="https://unpkg.com/three-spritetext",e.onload=()=>{console.log("Loaded three-spritetext.js");const e=document.createElement("script");e.src="https://unpkg.com/3d-force-graph",e.onload=()=>{console.log("Loaded 3d-force-graph.js")},document.head.appendChild(e)},document.head.appendChild(e)},document.head.appendChild(e);const t=window.getComputedStyle(document.documentElement),n=(e,n={})=>{const o=document.createElement("div");o.id="depviz-graph",document.getElementById("depviz").appendChild(o),((e,{backgroundColor:n="#eee",nodeColor:o="#000",linkColor:d="#000",colorIncoming:r="#07f",colorOutgoing:i="#f77",withLabels:l=!1,width:c=800,height:a=800}={})=>{const s={},p={},u={},h={},g=e.nodes.reduce(((e,t)=>({...e,[t.id]:t})),{});e.links.reduce(((e,t)=>({...e,[t.id]:t})),{}),e.links.forEach((e=>{Object.keys(u).includes(e.target)?u[e.target].push(e):u[e.target]=[e],Object.keys(s).includes(e.target)?s[e.target].push(g[e.source]):s[e.target]=[g[e.source]],Object.keys(h).includes(e.source)?h[e.source].push(e):h[e.source]=[e],Object.keys(p).includes(e.source)?p[e.source].push(g[e.target]):p[e.source]=[g[e.target]]}));const m=ForceGraph3D()(document.getElementById("depviz-graph")).width(c).height(a).backgroundColor(n).showNavInfo(!1).graphData(e),v=new Set,y=new Set,k=new Set,b=new Set,f=(e,t,n)=>t.has(e)?r:n.has(e)?i:d;l?(m.nodeThreeObject((e=>{const n=new SpriteText(e.id);return n.color=o,n.material.depthWrite=!1,n.textHeight=parseInt(t.fontSize)/2,n})),m.d3Force("charge").strength(-500)):m.nodeColor((e=>f(e,v,y))).nodeLabel((e=>`<span class="depviz-labels">${e.id}</span>`)).nodeOpacity(1).nodeResolution(16),m.linkColor((e=>f(e,k,b))).linkOpacity(1).linkWidth((e=>k.has(e)||b.has(e)?1:.3)).linkResolution(12).linkDirectionalParticles(3).linkDirectionalParticleWidth((e=>k.has(e)||b.has(e)?1.5:0)).linkDirectionalParticleResolution(12),m.onNodeHover((e=>{v.clear(),y.clear(),k.clear(),b.clear(),e&&(Object.keys(u).includes(e.id)&&u[e.id].forEach((e=>{k.add(e),v.add(e.source)})),Object.keys(h).includes(e.id)&&h[e.id].forEach((e=>{b.add(e),y.add(e.target)}))),m.nodeColor(m.nodeColor()),m.linkColor(m.linkColor())}))})(e,{backgroundColor:t.getPropertyValue("--background-color"),nodeColor:t.getPropertyValue("--font-color"),linkColor:t.getPropertyValue("--font-color"),colorIncoming:t.getPropertyValue("--link-color"),width:window.innerWidth,height:window.innerHeight-document.querySelector("#topbar").getBoundingClientRect().height-1,...n})};document.getElementById("depviz").innerHTML+='\n<div id="depviz-form">\n  <textarea\n    id="depviz-raw"\n    placeholder="select input format and whether a list of parents per child or a list of children per parent is provided"\n    rows="3"\n  ></textarea>\n  <input id="depviz-csv" name="format" type="radio" checked>\n  <label for="depviz-csv">CSV</label>\n  <input id="depviz-json" name="format" type="radio">\n  <label for="depviz-json">JSON</label>\n  <input id="depviz-reverse" name="flow" type="radio" checked>\n  <label for="depviz-reverse">parent &rarr; children</label>\n  <input id="depviz-vanilla" name="flow" type="radio">\n  <label for="depviz-vanilla">child &rarr; parents</label>\n  <input id="depviz-labels" type="checkbox">\n  <label for="depviz-labels">Labels</label>\n</div>\n<div class="depviz-buttons">\n  <a id="depviz-button">Submit</a>\n</div>\n',document.getElementById("depviz-button").addEventListener("click",(e=>{try{const e=((e,t,n)=>{const o={nodes:[],links:[]},d=[],r=[];let i="",l="";if("json"===t){const t=JSON.parse(e);Object.keys(t).forEach((e=>{d.includes(e)||(d.push(e),o.nodes.push({id:e})),t[e].forEach((t=>{d.includes(t)||(d.push(t),o.nodes.push({id:t})),n?(i=e,l=t):(l=e,i=t);const c=`${l}-${i}`;r.includes(c)||(r.push(c),o.links.push({id:c,source:i,target:l}))}))}))}else e.split("\n").forEach((e=>{if(n?[i,l]=e.split(",").map((e=>e.trim())):[l,i]=e.split(",").map((e=>e.trim())),i&&l&&i.length&&l.length){d.includes(i)||(d.push(i),o.nodes.push({id:i})),d.includes(l)||(d.push(l),o.nodes.push({id:l}));const e=`${l}-${i}`;r.includes(e)||(r.push(e),o.links.push({id:e,source:i,target:l}))}}));if(0===Object.keys(o).length)throw"InputError";return o})(document.getElementById("depviz-raw").value,document.getElementById("depviz-json").checked?"json":"csv",!!document.getElementById("depviz-reverse").checked),t={withLabels:document.getElementById("depviz-labels").checked};n(e,t),document.querySelectorAll("article > *:not(div:first-child)").forEach((e=>{e.style.display="none"})),document.querySelectorAll("article > div:first-child > *:not(#depviz)").forEach((e=>{e.style.display="none"})),document.querySelectorAll("article > div:first-child > #depviz > *:not(#depviz-graph)").forEach((e=>{e.style.display="none"})),document.getElementById("depviz").style.margin=0}catch(e){document.getElementById("depviz-raw").classList.add("error")}}));