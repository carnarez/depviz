import*as t from"https://cdn.skypack.dev/d3@7";const e=window.getComputedStyle(document.documentElement),n=(n,{nodeColor:o="#000",linkColor:r="#000",linkColorIncoming:a="#07f",linkColorOutgoing:i="#f77",radius:d=200,width:l=800,height:c=800}={})=>{const s={},p={};Object.keys(n).forEach((t=>{n[t].forEach((e=>{Object.keys(s).includes(e)?s[e].push(t):s[e]=[t]}))})),Object.keys(n).forEach((t=>{Object.keys(p).includes(t)||(p[t]={name:t}),n[t].forEach((t=>{Object.keys(p).includes(t)||(p[t]={name:t})}))}));const m=Object.keys(p).sort();p.length>100&&(d*=2);const u=2*Math.PI/m.length,g=Math.min(2*Math.sin(u/2)*d,parseInt(e.fontSize));m.forEach(((t,e)=>{const n=e*u-Math.PI/2;p[t]={name:t,objectId:t.replaceAll(".","-"),angle:180*n/Math.PI,x:Math.cos(n)*d,y:Math.sin(n)*d,_angle:n,_x:Math.cos(n),_y:Math.sin(n),incoming:[],outgoing:[]}}));const h=(e,n)=>t.line().curve(t.curveBundle.beta(.85))([[e.x,e.y],[0,0],[n.x,n.y]]);m.forEach((t=>{const e=p[t];Object.keys(n).includes(t)&&n[t].forEach((t=>{const n=p[t];e.incoming.push({sourceId:e.objectId,targetId:n.objectId,path:h(p[e.name],p[n.name])})})),Object.keys(s).includes(t)&&s[t].forEach((t=>{const n=p[t];e.outgoing.push({sourceId:n.objectId,targetId:e.objectId,path:h(p[e.name],p[n.name])})}))}));const f=t.create("svg").attr("id","depviz-graph").attr("width",l).attr("height",c).attr("viewBox",[-l/2,-c/2,l,c]);f.append("g").selectAll(null).data(Object.values(p)).join("g").attr("transform",(t=>`rotate(${t.angle}) translate(${d},0)`)).append("text").attr("id",(t=>`node-${t.objectId}`)).attr("x",(t=>t._x)).attr("y",(t=>t._y)).attr("dx",(t=>t.angle<=90?"5":"-5")).attr("dy",g/3).attr("text-anchor",(t=>t.angle<=90?"start":"end")).attr("transform",(t=>t.angle>90?"rotate(180)":null)).attr("cursor","pointer").attr("fill",o).attr("font-family",e.getPropertyValue("--font-family")).attr("font-size",g).attr("font-weight","normal").text((t=>t.name)).on("click",((t,e)=>{console.log(e)})).on("mouseover",((e,n)=>{t.select(`#node-${n.objectId}`).attr("font-size","normal").attr("font-weight","bold").raise(),n.incoming.map((e=>{t.select(`#link-${e.sourceId}-${e.targetId}`).attr("opacity","1.0").attr("stroke",a).attr("stroke-width","3").select((function(){return this.parentNode})).raise()})),n.outgoing.map((e=>{t.select(`#link-${e.sourceId}-${e.targetId}`).attr("opacity","1.0").attr("stroke",i).attr("stroke-width","3").select((function(){return this.parentNode})).raise()})),n.incoming.map((e=>{t.select(`#node-${e.targetId}`).attr("fill",a).attr("font-size","normal").attr("font-weight","bold").raise()})),n.outgoing.map((e=>{t.select(`#node-${e.sourceId}`).attr("fill",i).attr("font-size","normal").attr("font-weight","bold").raise()}))})).on("mouseout",((e,n)=>{t.select(`#node-${n.objectId}`).attr("font-size",g).attr("font-weight","normal"),n.incoming.map((e=>{t.selectAll(`.from-${e.sourceId}`).attr("opacity","0.5").attr("stroke",r).attr("stroke-width","1")})),n.outgoing.map((e=>{t.selectAll(`.from-${e.sourceId}`).attr("opacity","0.5").attr("stroke",r).attr("stroke-width","1")})),n.incoming.map((e=>{t.select(`#node-${e.targetId}`).attr("fill",o).attr("font-size",g).attr("font-weight","normal")})),n.outgoing.map((e=>{t.select(`#node-${e.sourceId}`).attr("fill",o).attr("font-size",g).attr("font-weight","normal")}))})),f.append("g").selectAll(null).data(Object.values(p).flatMap((t=>t.outgoing))).join("g").append("path").attr("id",(t=>`link-${t.sourceId}-${t.targetId}`)).attr("class",(t=>`from-${t.sourceId} to-${t.targetId}`)).attr("fill","none").attr("opacity","0.5").attr("stroke",r).attr("stroke-linecap","round").attr("d",(t=>t.path));return f.node()},o='\n<textarea\n  id="depviz-raw"\n  placeholder="select input format and whether a list of parents per child or a list of children per parent is provided"\n  rows="3"\n></textarea>\n<input id="depviz-csv" name="format" type="radio" checked>\n<label for="depviz-csv">CSV</label>\n<input id="depviz-json" name="format" type="radio">\n<label for="depviz-json">JSON</label>\n<input id="depviz-reverse" name="flow" type="radio" checked>\n<label for="depviz-reverse">parent &rarr; children</label>\n<input id="depviz-vanilla" name="flow" type="radio">\n<label for="depviz-vanilla">child &rarr; parents</label>\n';document.getElementById("depviz").innerHTML+=`\n<div id="depviz-form">${o}</div>\n<div class="depviz-buttons">\n  <a id="depviz-button">Submit</a>\n</div>\n`,document.getElementById("depviz-button").addEventListener("click",(t=>{if(document.getElementById("depviz-graph"))document.getElementById("depviz-graph").remove(),document.getElementById("depviz-form").innerHTML=o,document.getElementById("depviz-button").innerHTML="Submit";else try{(t=>{document.getElementById("depviz").appendChild(n(t,{nodeColor:e.getPropertyValue("--font-color"),linkColor:e.getPropertyValue("--font-color"),linkColorIncoming:e.getPropertyValue("--link-color"),width:window.innerWidth-4*parseInt(e.fontSize),height:Math.max(window.innerHeight,1200)}))})(((t,e,n)=>{const o={};if("json"===e){const e=JSON.parse(t);if(!n)return e;Object.keys(e).forEach((t=>{e[t].forEach((e=>{Object.keys(o).includes(e)?o[e].push(t):o[e]=[t]}))}))}else t.split("\n").forEach((t=>{let e="",r="";n?[e,r]=t.split(",").map((t=>t.trim())):[r,e]=t.split(",").map((t=>t.trim())),e&&r&&e.length&&r.length&&(Object.keys(o).includes(r)?o[r].push(e):o[r]=[e])}));if(0===Object.keys(o).length)throw"InputError";return o})(document.getElementById("depviz-raw").value,document.getElementById("depviz-json").checked?"json":"csv",!!document.getElementById("depviz-reverse").checked)),document.getElementById("depviz-form").innerHTML="",document.getElementById("depviz-button").innerHTML="Reset"}catch(t){document.getElementById("depviz-raw").classList.add("error")}}));