import{Graphviz as e}from"https://cdn.jsdelivr.net/npm/@hpcc-js/wasm/dist/index.js";const n=await e.load(),t=window.getComputedStyle(document.documentElement),o=(e,o)=>{document.getElementById("depviz").appendChild(((e,{fontColor:t="#000",nodeColor:o="#fff",nodeBorderColor:d="#000",linkColor:r="#000",layoutEngine:i="dot"}={})=>{const l={};let a=0;Object.keys(e).forEach((n=>{Object.keys(l).includes(n)||(a+=1,l[n]=a),e[n].forEach((e=>{Object.keys(l).includes(e)||(a+=1,l[e]=a)}))}));let c="graph {\n  bgcolor=transparent\n";c+="  // nodes\n",c+="  node [\n",c+=`    color="${d}",\n`,c+=`    fillcolor="${o}",\n`,c+=`    fontcolor="${t}",\n`,c+="    shape=box,\n",c+="    style=filled\n",c+="  ]\n",Object.keys(l).forEach((e=>{c+=`  node${l[e]} [label="${e}"]\n`})),c+="  // links\n",c+=`  edge [color="${r}"]\n`,Object.keys(e).forEach((n=>{e[n].forEach((e=>{c+=`  node${l[n]} -- node${l[e]}\n`}))})),c+="}",console.log(c);const p=document.createElement("div");return p.id="depviz-graph",p.innerHTML=n.layout(c,"svg",i),p})(e,{fontColor:t.getPropertyValue("--font-color"),nodeColor:t.getPropertyValue("--background-color-alt"),nodeBorderColor:t.getPropertyValue("--font-color"),linkColor:t.getPropertyValue("--font-color"),layoutEngine:o}))};let d='\n<textarea\n  id="depviz-raw"\n  placeholder="select input format and whether a list of parents per child or a list of children per parent is provided"\n  rows="3"\n></textarea>\n<input id="depviz-csv" name="format" type="radio" checked>\n<label for="depviz-csv">CSV</label>\n<input id="depviz-json" name="format" type="radio">\n<label for="depviz-json">JSON</label>\n<input id="depviz-reverse" name="flow" type="radio" checked>\n<label for="depviz-reverse">parent &rarr; children</label>\n<input id="depviz-vanilla" name="flow" type="radio">\n<label for="depviz-vanilla">child &rarr; parents</label>\n';d+='<div class="depviz-dropdown">\n  <span id="depviz-engine">dot</span>\n  <div class="depviz-dropdown-content">\n',["circo","dot","fdp","neato","osage","patchwork","sfdp","twopi"].forEach((e=>{d+=`<span onclick="document.getElementById('depviz-engine').innerHTML = '${e}';">${e}</span>`})),d+="\n  </div>\n</div>\n",document.getElementById("depviz").innerHTML+=`\n<div id="depviz-form">${d}</div>\n<div class="depviz-buttons">\n  <a id="depviz-button">Submit</a>\n</div>\n`,document.getElementById("depviz-button").addEventListener("click",(e=>{if(document.getElementById("depviz-graph"))document.getElementById("depviz-graph").remove(),document.getElementById("depviz-form").innerHTML=d,document.getElementById("depviz-button").innerHTML="Submit";else{const e=((e,n,t)=>{const o={};if("json"===n){const n=JSON.parse(e);if(t)return n;Object.keys(n).forEach((e=>{n[e].forEach((n=>{Object.keys(o).includes(n)?o[n].push(e):o[n]=[e]}))}))}else e.split("\n").forEach((e=>{let n="",d="";t?[n,d]=e.split(",").map((e=>e.trim())):[d,n]=e.split(",").map((e=>e.trim())),n&&d&&n.length&&d.length&&(Object.keys(o).includes(n)?o[n].push(d):o[n]=[d])}));if(0===Object.keys(o).length)throw"InputError";return o})(document.getElementById("depviz-raw").value,document.getElementById("depviz-json").checked?"json":"csv",!!document.getElementById("depviz-reverse").checked);o(e,document.getElementById("depviz-engine").innerHTML),document.getElementById("depviz-form").innerHTML="",document.getElementById("depviz-button").innerHTML="Reset"}}));