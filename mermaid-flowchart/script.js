import e from"https://cdn.jsdelivr.net/npm/mermaid@9/dist/mermaid.esm.min.mjs";const t=window.getComputedStyle(document.documentElement),n=(n,r)=>{document.getElementById("depviz").appendChild(((n,{diagramOrientation:r="TB",fontColor:o="#000",nodeColor:i="#fff",nodeBorderColor:d="#000",linkColor:l="#000"}={})=>{e.mermaidAPI.initialize({startOnLoad:!1,theme:"base",themeVariables:{fontFamily:t.getPropertyValue("--font-family"),fontSize:t.getPropertyValue("--font-size"),lineColor:l,primaryColor:i,primaryBorderColor:d,primaryTextColor:o}});const a={};let p=0;Object.keys(n).forEach((e=>{Object.keys(a).includes(e)||(p+=1,a[e]=p),n[e].forEach((e=>{Object.keys(a).includes(e)||(p+=1,a[e]=p)}))}));let m=`graph ${r}\n`;m+="  %% nodes\n",Object.keys(a).forEach((e=>m+=`  node${a[e]}(${e})\n`)),m+="  %% links\n",Object.keys(n).forEach((e=>{n[e].forEach((t=>{m+=`  node${a[e]} --- node${a[t]}\n`}))})),m+="  %% style\n",m+="  linkStyle default fill:none,stroke-width:1px\n",console.log(m);const c=document.createElement("svg");return c.id="depviz-graph",e.mermaidAPI.render("mermaid-diagram",m,(e=>{c.innerHTML=e})),c})(n,{diagramOrientation:r,fontColor:t.getPropertyValue("--font-color"),nodeColor:t.getPropertyValue("--background-color-alt"),nodeBorderColor:t.getPropertyValue("--font-color"),linkColor:t.getPropertyValue("--font-color")}))},r='\n<textarea\n  id="depviz-raw"\n  placeholder="select input format and whether a list of parents per child or a list of children per parent is provided"\n  rows="3"\n></textarea>\n<input id="depviz-csv" name="format" type="radio" checked>\n<label for="depviz-csv">CSV</label>\n<input id="depviz-json" name="format" type="radio">\n<label for="depviz-json">JSON</label>\n<input id="depviz-reverse" name="flow" type="radio" checked>\n<label for="depviz-reverse">parent &rarr; children</label>\n<input id="depviz-vanilla" name="flow" type="radio">\n<label for="depviz-vanilla">child &rarr; parents</label>\n<input id="depviz-lr" name="orientation" type="radio" value="LR">\n<label for="depviz-lr"></label>\n<input id="depviz-tb" name="orientation" type="radio" value="TB" checked>\n<label for="depviz-tb"></label>\n<input id="depviz-rl" name="orientation" type="radio" value="RL">\n<label for="depviz-rl"></label>\n<input id="depviz-bt" name="orientation" type="radio" value="BT">\n<label for="depviz-bt"></label>\n';document.getElementById("depviz").innerHTML+=`\n<div id="depviz-form">${r}</div>\n<div class="depviz-buttons">\n  <a id="depviz-button">Submit</a>\n</div>\n`,document.getElementById("depviz-button").addEventListener("click",(e=>{if(document.getElementById("depviz-graph"))document.getElementById("depviz-graph").remove(),document.getElementById("depviz-form").innerHTML=r,document.getElementById("depviz-button").innerHTML="Submit";else try{const e=((e,t,n)=>{const r={};if("json"===t){const t=JSON.parse(e);if(n)return t;Object.keys(t).forEach((e=>{t[e].forEach((t=>{Object.keys(r).includes(t)?r[t].push(e):r[t]=[e]}))}))}else e.split("\n").forEach((e=>{let t="",o="";n?[t,o]=e.split(",").map((e=>e.trim())):[o,t]=e.split(",").map((e=>e.trim())),t&&o&&t.length&&o.length&&(Object.keys(r).includes(t)?r[t].push(o):r[t]=[o])}));if(0===Object.keys(r).length)throw"InputError";return r})(document.getElementById("depviz-raw").value,document.getElementById("depviz-json").checked?"json":"csv",!!document.getElementById("depviz-reverse").checked);n(e,document.querySelector('input[name="orientation"]:checked').value),document.getElementById("depviz-form").innerHTML="",document.getElementById("depviz-button").innerHTML="Reset"}catch(e){document.getElementById("depviz-raw").classList.add("error")}}));